#!/usr/bin/env python3

#import sys,os,time,pickle,math,urllib2,getopt,subprocess,pexpect,random,operator,pymongo,json
import sys,os,time,pickle,math,urllib.request,getopt,subprocess,pexpect,random,operator,pymongo,json
import datetime,re,hashlib
from bson.objectid import ObjectId
from math import *
from collections import defaultdict


############## tinymongo ################
import tinydb
import tinymongo as tm
from tinymongo.serializers import DateTimeSerializer
from tinydb_serialization import SerializationMiddleware
class TinyMongoClient(tm.TinyMongoClient):
    @property
    def _storage(self):
        return tinydb.storages.JSONStorage
class CustomClient(TinyMongoClient):
    @property
    def _storage(self):
        serialization = SerializationMiddleware()
        serialization.register_serializer(DateTimeSerializer(), 'TinyDate')
        # register other custom serializers
        return serialization
############## tinymongo ################

############## wrapptermongo ################
class CustomCollection:
    def __init__(self, collection, is_mongo):
        self.collection = collection
        self.is_mongo = is_mongo

    def insert(self, entry):
        if self.is_mongo:
            return self.collection.insert_one(entry).inserted_id
        else:
            return self.collection.insert(entry)

    def remove(self, delentry):
        if self.is_mongo:
            return self.collection.delete_one(delentry)
        else:
            return self.collection.remove(delentry)

    def count(self):
        if self.is_mongo:
            return self.collection.count_documents({})
        else:
            return self.collection.count()  # Use the count method for TinyMongo

    def find_count(self,filter=None,projection=None):
        if self.is_mongo:
            return self.collection.count_documents(filter, projection)
        else:
            return self.collection.find(filter, e=projection).count()

    def find(self, filter=None, projection=None):
        if self.is_mongo:
            return self.collection.find(filter, projection)
        else:
            return self.collection.find(filter, e=projection)

    def find_one(self, check):
        if self.is_mongo:
            return self.collection.find_one(check)
        else:
            return self.collection.find_one(check)


    def update(self, check, new_values, upsert=False, multi=False):
        if self.is_mongo:
            return self.collection.update_many(check, new_values, upsert=upsert)
        else:
            return self.collection.update(check, new_values, upsert=upsert, multi=multi)

    #def update(self, check, new_values):
    #    if self.is_mongo:
    #        return self.collection.update_many(check, new_values)
    #    else:
    #        return self.collection.update(check, new_values)

    def update_one(self, check, new_values):
        if self.is_mongo:
            return self.collection.update_one(check, new_values)
        else:
            return self.collection.update(check, new_values, multi=False)

    #def update_one(self, check, new_values):
    #    if self.is_mongo:
    #        return self.collection.update_one(check, new_values)
    #    else:
    #        return self.collection.update(check, new_values)
############## wrapptermongo ################


###################### PARAMETERS ###########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME           = __file__.split("HeteroFAM")[0] + "HeteroFAM"
#ARROWS_HOME           = "/HeteroFAM/bin/"
MY_ENV                = os.environ.copy()
MY_ENV["ARROWS_HOME"] = ARROWS_HOME

ARROWS_API_HOME = 'http://localhost:8080/api/'
#ARROWS_API_HOME = 'http://heterofam.pnnl.gov/api/'

#print("ARROWS_HOME=", ARROWS_HOME)
#print("MY_ENV=", MY_ENV)
#print("ARROWS_API_HOME=", ARROWS_API_HOME)


####################### mongoDB #############################
#uri = "mongodb://arrows:password@machine.gov:27017"
with open(ARROWS_HOME + "/bin/.queue_nwchem",'r') as f: uri = f.readline().strip()
if "mongodb:" in uri:
   nosql_client = pymongo.MongoClient(uri)
   ismongo      = True
else:
   nosql_client = CustomClient(uri)
   ismongo      = False

# Define the TinyMongo collections
arrows_db                       = nosql_client.Arrows
solid_queue_collection          = CustomCollection(arrows_db.solid_queue_collection, ismongo)
solid_finished_queue_collection = CustomCollection(arrows_db.solid_finished_queue_collection, ismongo)
qnumber_collection              = CustomCollection(arrows_db.queue_number,ismongo)

#arrows_db                        = nosql_client.Arrows
#chemdb_queue_collection          = arrows_db.chemdb_queue_collection
#chemdb_finished_queue_collection = arrows_db.chemdb_finished_queue_collection
#qnumber_collection               = arrows_db.queue_number
####################### mongoDB #############################

############## machine parameters #########################

solid_add_nwout = ARROWS_HOME + "/bin/solid_add_nwout7 "

wrkdir           = ARROWS_HOME + "/Work"
tmpxyz1          = "solid_queue.xyz" 
tmpinchi1        = "solid_queue.inchi" 
curdir           = os.getcwd()
lockfilename     = ARROWS_HOME + "/Work/solidqueue1.lockfile"
############## machine parameters #########################
###################### PARAMETERS ###########################

def use_arrows_api(prog):
   return prog + "--arrows_api=" + ARROWS_API_HOME + " "


def evalnum(s):
   try:
      return int(s)
   except ValueError:
      return float(s)


##### geturlresult function ####
#def geturlresult(url):
#    try:
#        proxy = urllib.ProxyHandler({'http': 'http://squid-proxy.pnl.gov:3128',
#                                      'https': 'https://squid-proxy.pnl.gov:3128'}
#                                    )
#        opener = urllib.build_opener(proxy)
#        urllib.install_opener(opener)
#        connection = urllib.urlopen(url)
#    except urllib2.HTTPError(e):
#        return ""
#    else:
#        return connection.read().rstrip()

#### geturlresult function ####
def geturlresult(url):
   try:
      the_page = ""
      with urllib.request.urlopen(url) as response:
         the_page = response.read().rstrip()
   except:
      the_page = ""

   if isinstance(the_page,bytes): the_page = the_page.decode("utf-8")

   return the_page




def extract_charge_and_multiplicity(lines):
    charge = 0
    mult = 1
    for line in lines:
        line = line.strip().lower()
        if line.startswith("charge"):
            parts = line.split()
            if len(parts) >= 2:
                try:
                    charge = int(parts[1])
                except ValueError:
                    pass
        elif line.startswith("mult"):
            parts = line.split()
            if len(parts) >= 2:
                try:
                    mult = int(parts[1])
                except ValueError:
                    pass
    return charge, mult

def extract_cutoff_energy(lines):
    in_nwpw = False
    for line in lines:
        line = line.strip()
        if line.lower().startswith("nwpw"):
            in_nwpw = True
            continue
        if in_nwpw:
            if line.lower().startswith("end"):
                in_nwpw = False
                continue
            match = re.search(r"cutoff\s+([\d\.Ee+-]+)", line, re.IGNORECASE)
            if match:
                return float(match.group(1))
    return None


def extract_calc_genome(lines):
    task_lines = []
    task_pattern = re.compile(r'^\s*task\s+(\w+)\s+(\w+)', re.IGNORECASE)
    for line in lines:
        match = task_pattern.search(line)
        if match:
            theory, op = match.groups()
            task_lines.append(f"{theory.lower()}:{op.lower()}")
    return "-".join(task_lines)


def extract_xc_functional(lines):
    xc_pattern = re.compile(r"\bxc\s+(\S+)", re.IGNORECASE)
    for line in lines:
        match = xc_pattern.search(line)
        if match:
            return match.group(1).lower()
    return "LDA"

def canonicalize_nwchem_input(lines):
    canonical_lines = []
    for line in lines:
        line = line.strip()
        if line.startswith("#") or line.lower().startswith("echo"):
            continue
        line = re.sub(r"#.*", "", line)
        if not line:
            continue
        canonical_lines.append(line.lower())
    canonical_text = " ".join(canonical_lines)
    canonical_text = re.sub(r"\s+", " ", canonical_text)
    return canonical_text.strip()

def vector_length(v):
    return math.sqrt(sum([x ** 2 for x in v]))

def angle_between(v1, v2):
    dot = sum([a * b for a, b in zip(v1, v2)])
    norm1 = vector_length(v1)
    norm2 = vector_length(v2)
    cos_theta = dot / (norm1 * norm2)
    cos_theta = max(min(cos_theta, 1.0), -1.0)
    return math.degrees(math.acos(cos_theta))


def extract_geometry_info(lines):
    in_geometry = False
    in_system_block = False
    in_lattice_vectors = False
    element_counts = defaultdict(int)
    vectors = []
    lattice = {
        "lat_a": None, "lat_b": None, "lat_c": None,
        "alpha": None, "beta": None, "gamma": None
    }

    for line in lines:
        line = line.strip()
        if line.lower().startswith("geometry"):
            in_geometry = True
            continue
        if in_geometry:
            if line.lower().startswith("end"):
                if in_lattice_vectors:
                    in_lattice_vectors = False
                    continue
                elif in_system_block:
                    in_system_block = False
                    continue
                else:
                    in_geometry = False
                    continue

            if line.lower().startswith("system"):
                in_system_block = True
                continue



            if in_system_block:
                match = re.match(r"(lat_[abc]|alpha|beta|gamma)\s+([\d\.\-Ee]+)", line, re.IGNORECASE)
                if match:
                    key, val = match.groups()
                    lattice[key.lower()] = float(val)
                    continue
                if line.lower().startswith("lattice_vectors"):
                    in_lattice_vectors = True
                    continue

            if in_lattice_vectors:
                tokens = line.split()
                if len(tokens) == 3:
                    try:
                        vectors.append([float(x) for x in tokens])
                        if len(vectors) == 3:
                            in_lattice_vectors = False
                        continue
                    except ValueError:
                        pass

            # Always try parsing element lines
            tokens = line.split()
            if len(tokens) >= 4:
                element = tokens[0]
                try:
                    [float(tok) for tok in tokens[1:4]]
                    if re.match(r"^[A-Z][a-z]?$", element):
                        element_counts[element] += 1
                except ValueError:
                    continue

    # Compute lattice from vectors
    if len(vectors) == 3:
        a = vector_length(vectors[0])
        b = vector_length(vectors[1])
        c = vector_length(vectors[2])
        alpha = angle_between(vectors[1], vectors[2])
        beta = angle_between(vectors[0], vectors[2])
        gamma = angle_between(vectors[0], vectors[1])
        lattice.update({
            "lat_a": a, "lat_b": b, "lat_c": c,
            "alpha": alpha, "beta": beta, "gamma": gamma
        })

    def hill_sort(elem):
        if elem == "C":
            return (0, elem)
        if elem == "H":
            return (1, elem)
        return (2, elem)

    formula = "".join(f"{el}{(element_counts[el] if element_counts[el] > 1 else '')}"
                      for el in sorted(element_counts, key=hill_sort))
    return formula if formula else "Unknown", lattice




def process_nwchem_file(filename):
    try:
        with open(filename, 'r') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        sys.exit(1)

    canonical_text = canonicalize_nwchem_input(lines)
    formula, lattice = extract_geometry_info(lines)
    hash_value = hashlib.sha256(canonical_text.encode("utf-8")).hexdigest()
    xc = extract_xc_functional(lines)
    genome = extract_calc_genome(lines)
    cutoff = extract_cutoff_energy(lines)
    charge, multiplicity = extract_charge_and_multiplicity(lines)

    return formula, hash_value, lattice, xc, genome, cutoff, charge, multiplicity





periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}


periodic_table_valence_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 1,
    'Be' : 2,
    'B'  : 3,
    'C'  : 4,
    'N'  : 5,
    'O'  : 6,
    'F'  : 7,
    'Ne' : 8,
    'Na' : 1,
    'Mg' : 2,
    'Al' : 3,
    'Si' : 4,
    'P'  : 5,
    'S'  : 6,
    'Cl' : 7,
    'Ar' : 8,
    'K'  : 1,
    'Ca' : 2,
    'Sc' : 3,
    'Ti' : 4,
    'V'  : 5,
    'Cr' : 6,
    'Mn' : 7,
    'Fe' : 8,
    'Co' : 9,
    'Ni' : 10,
    'Cu' : 11,
    'Zn' : 12,
    'Ga' : 3,
    'Ge' : 4,
    'As' : 5,
    'Se' : 6,
    'Br' : 7,
    'Kr' : 8,
    'Rb' : 1,
    'Sr' : 2,
    'Y'  : 3,
    'Zr' : 4,
    'Nb' : 5,
    'Mo' : 6,
    'Tc' : 7,
    'Ru' : 8,
    'Rh' : 9,
    'Pd' : 10,
    'Ag' : 11,
    'Cd' : 12,
    'In' : 3,
    'Sn' : 4,
    'Sb' : 5,
    'Te' : 6,
    'I'  : 7,
    'Xe' : 8,
    'Cs' : 1,
    'Ba' : 2,
    'La' : 3,
    'Ce' : 4,
    'Pr' : 5,
    'Nd' : 6,
    'Pm' : 7,
    'Sm' : 8,
    'Eu' : 9,
    'Gd' : 10,
    'Tb' : 11,
    'Dy' : 12,
    'Ho' : 13,
    'Er' : 14,
    'Tm' : 15,
    'Yb' : 16,
    'Lu' : 17,
    'Hf' : 4,
    'Ta' : 5,
    'W'  : 6,
    'Re' : 7,
    'Os' : 8,
    'Ir' : 9,
    'Pt' : 10,
    'Au' : 11,
    'Hg' : 12,
    'Tl' : 3,
    'Pb' : 4,
    'Bi' : 5,
    'Po' : 6,
    'At' : 7,
    'Rn' : 8,
    'Fr' : 1,
    'Ra' : 2,
    'Ac' : 3,
    'Th' : 4,
    'Pa' : 5,
    'U'  : 6,
    'Np' : 7,
    'Pu' : 8,
    'Am' : 9,
    'Cm' : 10,
    'Bk' : 11,
    'Cf' : 12,
    'Es' : 13,
    'Fm' : 14,
    'Md' : 15,
    'No' : 16,
    'Lr' : 17,
    'Rf' : 4,
    'Ha' : 5,
    'Sg' : 6,
    'Bh' : 7,
    'Hs' : 8,
    'Mt' : 9
}






def xyz_molecular_formula(xyzfilename):
   #
   fdict = {}
   xyzfile = open(xyzfilename,'r')
   n = evalnum(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (key in fdict):
         fdict[key] += 1
      else:
         fdict[key] = 1
   xyzfile.close()

   formula = ''
   #ll = fdict.items()
   #for i in range(len(ll)):
   #   formula += ll[i][0] + "%d" % ll[i][1]
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      formula += x[0] + "%d" % x[1]

   return formula


def xyz2mult(xyzfilename,q):
  mult = 1
  pcharge = q
  count = 0
  xyzfile = open(xyzfilename,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult

#### xyz2smiles function ####
def xyz2smiles(xyzfile):
   try:
      smiles = ''
      smilefile = wrkdir + "/"+tmpinchi1
      cmd6 = babel + " -ixyz " + xyzfile + " -ocan " + smilefile
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles = ''
   return smiles


def removespace_basis(basis):
   if ('ry' not in basis.lower()) and ('hartree' not in basis.lower()):
      basis = basis.replace(" ", "")
   return basis




def mformula2valencecharge(mformula):
  mult    = 1
  vcharge = 0
  count   = 0
  largeatom = False

  symbolcountlist = re.findall('[a-zA-Z]+|\\d+', mformula) 
  count = len(symbolcountlist)
  for i in range(count//2):
     symb = symbolcountlist[2*i]
     n    = evalnum(symbolcountlist[2*i+1])
     if symb in periodic_table_valence_charge:
        vcharge += n*periodic_table_valence_charge[symb]
     if symb in periodic_table_charge:
        if (periodic_table_charge[symb]>35): largeatom = True

  #if ((largeatom) and (vcharge<51)): vcharge = 55

  return vcharge

#############################################
#                                           #
#        theorymformula2machinetype         #
#                                           #
#############################################

def theorysmiles2machinetype(theory,mformula):
   vachinetype = "toobig"
   hasmopac    = False
   vcharge = mformula2valencecharge(mformula)
   print("mformula,vcharge=",mformula,vcharge)
   if ('am1' in theory) or ('pm3' in theory) or ('mndo' in theory) or ('mindo3' in theory):
      vachinetype = 'mopac'
   elif ('qsharp_chem' in theory):
      if vcharge<50:
         vachinetype = 'qsharp'
   elif ('ccsd(t)' in theory) or ('ccsd' in theory):
      if vcharge<50:
         vachinetype = 'large'
   elif ('mp2' in theory):
      if vcharge<80:
         vachinetype = 'large'
   elif ('pspw4' in theory):
      if vcharge<50:
         vachinetype = 'small'
      elif vcharge<150:
         vachinetype = 'medium'
      elif vcharge<300:
         vachinetype = 'large'
   else:
      if vcharge<30:
         vachinetype = 'tiny'
      elif vcharge<50:
         vachinetype = 'small'
      elif vcharge<100:
         vachinetype = 'medium'
      elif vcharge<200:
         vachinetype = 'large'


   return vachinetype





#############################################
#                                           #
#            checkentry                     #
#                                           #
#############################################
def checkentry(entry):

   check = {}
   #check['csmiles']    =    entry['csmiles']
   check['mformula']  = entry['mformula']
   #check['inchi']     = entry['inchi']
   #check['inchikey']  = entry['inchikey']
   check['charge']    = entry['charge']
   check['mult']      = entry['mult']
   check['xc']        = entry['xc']

   if ("xyzdata" in entry): check['xyzdata']  = entry['xyzdata']

   return check



############################# main program ###################################
usage = \
"""
solid_queue program

  Usage: solid_queue --arrows_api="http://localhost/api" -a nwinput_file -d queue_entry -f queue_entry -w nwout -z string_of_datafiles  -l

  -l list entries
  -k list finished nwchem entries
  -s submit finished nwchem entries to solid_add_nwout
  -a nwinput_file
  -b label
  -d delete queue_entry
  -e delete finished nwchem solid_queue_entry
  -f fetch nwchem input deck
  -q fetch nwchem input deck on queue
  -w add nwchemoutput
  -z string of extra_datafiles only works when used with -w option
  -r reset queue entry
  -m change queue of queue entry
  --arrows_api= url location of webapi

"""


tt      = time.localtime()

submitqueue2 = False
listqueues = True
listqueues2= False
addqueue   = False
addqueue0  = False
delqueue   = False
delqueue2  = False
runqueue   = False
getqueue   = False
resetqueue = False
changequeue = False
newqueue    = 'first'
extra_datafiles = ''
nwinputfile      = ''
nwoutfile      = ''
label          = ''
vtag            = ''
opts, args = getopt.getopt(sys.argv[1:], "a:b:d:e:f:q:w:z:v:r:m:lskh", ['help','arrows_api=','heterofam_api='])
for o, a in opts:
  if o=='-l':
     listqueues = True
  if o=='-k':
     listqueues2 = True
  if o=='-s':
     submitqueue2 = True
     listqueues   = False
  if o=='-a':
     nwinputfile = a
     listqueues = False
     addqueue   = True
  if o=='-b':
     label = a
  if o=='-r':
     try:
        reset_queue_number = evalnum(a)
        listqueues = False
        resetqueue = True
     except:
        listqueues = True
        resetqueue = False
  if o=='-m':
     try:
        if ("M" in a):
           reset_queue_number = evalnum(a.split("M")[0].strip())
           newqueue           = a.split("M")[1].strip()
        else:
           reset_queue_number = evalnum(a)
        listqueues = False
        changequeue = True
     except:
        listqueues = True
        changequeue = False

  if o=='-d':
     try:
        delete_queue_number = evalnum(a)
        listqueues = False
        delqueue   = True
     except:
        listqueues = True
        delqueue   = False
  if o=='-e':
     try:
        delete2_queue_number = evalnum(a)
        listqueues = False
        delqueue2   = True
     except:
        listqueues2 = True
        delqueue2   = False
  if o=='-f':
     try:
        run_queue_number = evalnum(a)
        listqueues = False
        runqueue   = True
     except:
        listqueues = True
        runqueue   = False
  if o=='-q':
     try:
        run_queue_number = evalnum(a)
        listqueues = False
        getqueue   = True
     except:
        listqueues = True
        getqueue   = False
  if o=='-g':
     try:
        out_queue_number = eval(a)
        listqueues = False
        outqueue   = True
     except:
        listqueues = True
        outqueue   = False
  if o=='-w':
     nwoutfile = a
     listqueues = False
  if o=='-z':
     extra_datafiles = a
  if o=='-v':
     vtag = a
     print("# - adding tag " + vtag + " to input deck.\n")
  if o == "--arrows_api":
     ARROWS_API_HOME = a

  if o == "--heterofam_api":
     ARROWS_API_HOME = a

  if o in ("-h","--help"):
    print(usage)
    exit()

print()
print("#solid_queue - version 2.0 - arrows_api url=",ARROWS_API_HOME)
print()

if (listqueues):
   check = {}
   echeck = {}
   if ismongo:
      echeck['queue_number'] = 1
      echeck['fetched'] = 1
      echeck['mformula'] = 1
      #echeck['xc'] = 1
      #echeck['charge'] = 1
      #echeck['mult'] = 1
      #echeck['lattice'] = 1
      #echeck['genome'] = 1
      echeck['hash'] = 1
      echeck['client'] = 1
   queue = solid_queue_collection.find(check,echeck)
   print("queue_entry   fetched    mformula")
   ss = []
   for entry in queue:
      if ('queue_number' in entry):
         ss.append("%11d %8d    \"%s\" hash=%s" % (entry['queue_number'],entry['fetched'],entry['mformula'],entry['hash']))

   ss.sort()
   for entry in ss:
      print(entry)

if (listqueues2):
   check = {}
   echeck = {}
   if ismongo:
      echeck['queue_number'] = 1
      echeck['mformula'] = 1
      echeck['hash'] = 1
      echeck['nwchem_output'] = 1
      echeck['extra_datafiles'] = 1
   queue2 = solid_finished_queue_collection.find(check,echeck)
   print()
   print("Finsihed Jobs Queue:")
   for entry in queue2:
      print("queue_entry=%d mformula=%s nwchem_output=%s extra_datafiles=%s" % (entry['queue_number'],entry['mformula'],entry['nwchem_output'],entry['extra_datafiles']))

if (submitqueue2):
   check = {}
   queue2 = solid_finished_queue_collection.find(check)
   print()
   print("Adding Finsihed Jobs Queue to Arrows:")
   delete_queue2 = []
   for entry in queue2:

      ### remove queue entry ###
      delete_queue2.append({'queue_number' : entry['queue_number']})

      if entry['nwchem_output']!='':
         print(" - Adding queue_entry=%d mformula=%s nwchem_output=%s extra_datafiles=%s" % (entry['queue_number'],entry['mformula'],entry['nwchem_output'],entry['extra_datafiles']))
         cmd2 = solid_add_nwout
         if entry['extra_datafiles']!='':
            cmd2 += '-z \"'+ entry['extra_datafiles'] + '\" '
         cmd2 += entry['nwchem_output']
         try:
            print(" - running: " + cmd2)
            result = subprocess.check_output(cmd2,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
            print(result)
         except:
            print("failed:  " + cmd2)
         print()

         ### remove datafiles ###
         allfiles = entry['nwchem_output'] + " " + entry['extra_datafiles']
         for filename in allfiles.strip().split():
            try:
               if os.path.isfile(filename):
                  os.unlink(filename)
            except Exception as e:
               print(e)

   ### remove entries from queue2 ###
   for delentry2 in delete_queue2:
      q = solid_finished_queue_collection.remove(delentry2)






if (addqueue):
   entry = {}

   if ("/" not in nwinputfile): nwinputfile = curdir +"/" + nwinputfile
   nwfileexist = os.path.exists(nwinputfile)
   print("Nwfileexist=",nwfileexist);
   if (nwfileexist):

      mformula, hash_value, lattice, xc, genome, cutoff, charge, multiplicity = process_nwchem_file(nwinputfile)

      entry['mformula'] = mformula
      entry['charge']   = charge
      entry['mult']     = multiplicity
      entry['cutoff']   = cutoff
      entry['genome']   = genome
      entry['xc']       = xc
      entry['lattice']  = lattice
      entry['hash']     = hash_value

      ### fetch nwchem output for parsing ###
      with open(nwinputfile,'r') as ff:
         nwchem_input = ff.read()
      if ("python" in nwchem_input.lower()): nwchem_input = "Don't be a Jerk!"

      if ("echo" not in nwchem_input) and (".nw" in nwinputfile): nwchem_input = "echo\n" + nwchem_input

      if (label==''):
         if ("label:" in nwchem_input) and (":label" in nwchem_input) and (".nw" in nwinputfile):
            label = nwchem_input.split('label:')[1].split(':label')[0].strip()
         elif ("label:" in nwchem_input) and (":label" in nwchem_input) and (".inp" in nwinputfile):
            label = nwchem_input.split('label:')[1].split(':label')[0].strip()
         else:
            label =  nwinputfile[nwinputfile.rfind('/')+1:]

      ### set queue number  ##
      queue_number00 = -9
      #queue_number00  = qnumber_collection.find_one({'queue':'chemdb_queue_nwchem'})['count']
      #qqq = qnumber_collection.update({'queue':'chemdb_queue_nwchem'},{'$inc':{'count':1}},upsert=False,multi=False)
      if (qnumber_collection.find_count({'queue':'solid_queue'})>0):
         queue_number00  = qnumber_collection.find_one({'queue':'solid_queue'})['count']
      else:
         queue_number00 = 1
         qqq = qnumber_collection.insert({'queue':'solid_queue', 'count':1})
      if ismongo:
         qqq = qnumber_collection.update({'queue':'solid_queue'},{'$inc':{'count':1}},upsert=False,multi=False)
      else:
         qp1 = queue_number00+1
         qqn = {'count': qp1}
         qqq = qnumber_collection.update_one({'queue':'solid_queue'},{'$set':qqn})


      entry['queue_number']       = queue_number00
      entry['label']              = label
      entry['nwchem_input_deck']  = nwchem_input
      entry['restart_input_deck'] = "no"
      entry['restart_count'] = 0
      entry['fetched'] = 0
      entry['finished'] = 'no'
      entry['stopped']  = 'no'
      entry['start_time']  = time.time()

   #centry = checkentry(entry)
   #duplicatecount = solid_queue_collection.find_count(centry)
   duplicatecount = 0
   print("duplicatecount=", duplicatecount)
   if (duplicatecount==0): 
      qq = solid_queue_collection.insert(entry)
      print("Added " + mformula + " to solid_queue. queue_entry=",entry['queue_number'])
   else:
      print("Did not add " + mformula + " to solid_queue, because it already exists.")




if (delqueue):
   delentry = {'queue_number' : delete_queue_number}
   print("delentry=",delentry)
   queue = solid_queue_collection.remove(delentry)

if (delqueue2):
   delentry2 = {'queue_number' : delete2_queue_number}
   print("delentry2=",delentry2)
   queue = solid_finished_queue_collection.remove(delentry2)

if (resetqueue):
   resetentry = {'queue_number' : reset_queue_number}
   print("resetentry=",resetentry)
   if ismongo:
      qqq      = solid_queue_collection.update(resetentry,{'$set':{'fetched':0}},upsert=False,multi=False)
   else:
      qqq      = solid_queue_collection.update_one(resetentry,{'$set':{'fetched':0}})

if (changequeue):
   resetentry = {'queue_number' : reset_queue_number}
   print("changeentry=",resetentry)
   if ismongo:
      qqq      = solid_queue_collection.update(resetentry,{'$set':{'machine_type':newqueue}},upsert=False,multi=False)
   else:
      qqq      = solid_queue_collection.update_one(resetentry,{'$set':{'machine_type':newqueue}})


if (runqueue):
   runentry = {'queue_number' : run_queue_number}
   if ismongo:
      qqq      = solid_queue_collection.update(runentry,{'$inc':{'fetched':1}},upsert=False,multi=False)
   else:
      qp1 = solid_queue_collection.find_one(runentry)['fetched'] + 1
      qqn = {'fetched': qp1}
      qqq = solid_queue_collection.update_one(runentry,{'$set':qqn})

   entry    = solid_queue_collection.find_one(runentry)
   data1 =  "#########################  START NWCHEM INPUT DECK - NWJOB %d ########################\n" % entry['queue_number']
   data1 += "#\n"
   data1 += "# NWChemJobId: %s" % entry['_id']
   data1 += "\n"
   data1 += "#\n"
   data1 += "# mformula - %s\n" % entry['mformula']
   data1 += "# charge   - %d\n" % entry['charge']
   data1 += "# mult     - %d\n" % entry['mult']
   if (entry['cutoff']):
      data1 += "# cufoff   - %f\n" % entry['cutoff']
   data1 += "# xc       - %s\n" % entry['xc']
   data1 += "# lattice  - %s\n" % entry['lattice']
   data1 += "# genome   - %s\n" % entry['genome']
   data1 += "#\n"
   data1 +=  entry['nwchem_input_deck'] + "\n"
   data1 += "#########################  END   NWCHEM INPUT DECK - NWJOB %d ########################\n" % entry['queue_number']
   print(data1)

if (getqueue):
   runentry = {'queue_number' : run_queue_number}
   entry    = solid_queue_collection.find_one(runentry)
   data1 =  "#########################  START NWCHEM INPUT DECK - NWJOB %d ########################\n" % entry['queue_number']
   data1 += "#\n"
   data1 += "# NWChemJobId: %s" % entry['_id']
   data1 += "\n"
   data1 += "#\n"
   data1 +=  entry['nwchem_input_deck'] + "\n"
   data1 += "#########################  END   NWCHEM INPUT DECK - NWJOB %d ########################\n" % entry['queue_number']
   print(data1)

if (nwoutfile!=''):

   if ("/" not in nwoutfile): nwoutfile = curdir +"/" + nwoutfile
   nwfileexist = os.path.exists(nwoutfile)
   if (nwfileexist):
      ### fetch nwchem output for parsing ###
      with open(nwoutfile,'r') as ff: 
         nwchemoutput = ff.read()

      extra_datafiles2 = ''
      for bb in extra_datafiles.strip().split():
         dfile = bb
         if ("/" not in dfile): dfile = curdir +"/" + dfile
         extra_datafiles2 += dfile + " "
      extra_datafiles = extra_datafiles2.strip()

      #### fetch extra datafiles ###
      #datafiles = []
      #for dfile in extra_datafiles.strip().split():
      #   with open(dfile,'r') as ff: 
      #      data = ff.read()
      #   datafiles.append((dfile,data))
      mformula = "UNKNOWN"
      xc       = "UNKNOWN"
      lattice  = "UNKNOWN"
      charge   = 0
      mult     = 1
      cutoff   = 50.0
      genome   = "UNKNOWN"

      if "# NWChemJobId:" in nwchemoutput:
         if ismongo:
            id = ObjectId(nwchemoutput.split('NWChemJobId:')[1].split('\n')[0].strip())
         else:
            id = nwchemoutput.split('NWChemJobId:')[1].split('\n')[0].strip()
         print("ID=",id)
         entry = solid_queue_collection.find_one({'_id': id})
         print("Entry to delete:", entry)

         ### set some properties
         mformula = entry['mformula']
         xc       = entry['xc']
         lattice  = entry['lattice']
         charge   = entry['charge']
         mult     = entry['mult']
         cutoff   = entry['cutoff']
         genome   = entry['genome']

         delentry = {}
         delentry['_id']  = id
         print("deleting entry=",delentry)
         queue = solid_queue_collection.remove(delentry)


      ### set queue number  ##
      #queue_number00  = qnumber_collection.find_one({'queue':'solid_queue'})['count']
      if (qnumber_collection.find_count({'queue':'solid_queue'})>0):
         queue_number00  = qnumber_collection.find_one({'queue':'solid_queue'})['count']
      else:
         queue_number00 = 1
         qqq = qnumber_collection.insert({'queue':'solid_queue', 'count':1})
      if ismongo:
         qqq = qnumber_collection.update({'queue':'solid_queue'},{'$inc':{'count':1}},upsert=False,multi=False)
      else:
         qp1 = queue_number00+1
         qqn = {'count': qp1}
         qqq = qnumber_collection.update_one({'queue':'solid_queue'},{'$set':qqn})

      newentry = {}
      newentry['queue_number']     = queue_number00
      newentry['nwchem_output']    = nwoutfile
      newentry['extra_datafiles']  = extra_datafiles
      newentry['mformula'] = mformula
      newentry['lattice']  = lattice
      newentry['xc']       = xc
      newentry['cutoff']   = cutoff
      newentry['charge']   = charge
      newentry['mult']     = mult
      newentry['genome']   = genome
 
      qq = solid_finished_queue_collection.insert(newentry)
      

